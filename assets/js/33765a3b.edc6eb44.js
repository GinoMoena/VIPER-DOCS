"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2597],{3905:(e,o,a)=>{a.d(o,{Zo:()=>l,kt:()=>f});var n=a(7294);function t(e,o,a){return o in e?Object.defineProperty(e,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[o]=a,e}function r(e,o){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?r(Object(a),!0).forEach((function(o){t(e,o,a[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(a,o))}))}return e}function s(e,o){if(null==e)return{};var a,n,t=function(e,o){if(null==e)return{};var a,n,t={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],o.indexOf(a)>=0||(t[a]=e[a]);return t}(e,o);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],o.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var u=n.createContext({}),d=function(e){var o=n.useContext(u),a=o;return e&&(a="function"==typeof e?e(o):i(i({},o),e)),a},l=function(e){var o=d(e.components);return n.createElement(u.Provider,{value:o},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},p=n.forwardRef((function(e,o){var a=e.components,t=e.mdxType,r=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=d(a),p=t,f=m["".concat(u,".").concat(p)]||m[p]||c[p]||r;return a?n.createElement(f,i(i({ref:o},l),{},{components:a})):n.createElement(f,i({ref:o},l))}));function f(e,o){var a=arguments,t=o&&o.mdxType;if("string"==typeof e||t){var r=a.length,i=new Array(r);i[0]=p;var s={};for(var u in o)hasOwnProperty.call(o,u)&&(s[u]=o[u]);s.originalType=e,s[m]="string"==typeof e?e:t,i[1]=s;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3842:(e,o,a)=>{a.r(o),a.d(o,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var n=a(7462),t=(a(7294),a(3905));const r={},i="CommandBuffer",s={unversionedId:"ECS/Components/CommandBuffer",id:"ECS/Components/CommandBuffer",title:"CommandBuffer",description:'CommandBuffer es un componente que almacena una serie de comandos en una cola de un tama\xf1o determinado por el usuario (por defecto es 10). La idea de este componente es que sirva de ayuda para tener acciones buffereadas en el juego como por ejemplo al caer de un salto y presionar la tecla de salto nuevamente prevenir que el input de salto sea "comido" por el estado de aire y se pueda agendar para cuando toque el suelo en un tiempo de espera m\xe1ximo de 10 frames.',source:"@site/docs/ECS/Components/CommandBuffer.md",sourceDirName:"ECS/Components",slug:"/ECS/Components/CommandBuffer",permalink:"/VIPER-DOCS/docs/ECS/Components/CommandBuffer",draft:!1,editUrl:"https://github.com/GinoMoena/VIPER-DOCS/tree/main/docs/ECS/Components/CommandBuffer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Command",permalink:"/VIPER-DOCS/docs/ECS/Components/Command"},next:{title:"EntityManager",permalink:"/VIPER-DOCS/docs/ECS/Components/EntityManager"}},u={},d=[{value:"Atributos",id:"atributos",level:3},{value:"BufferSize",id:"buffersize",level:4},{value:"M\xe9todos",id:"m\xe9todos",level:3},{value:"Update()",id:"update",level:4},{value:"GetCommand() <code>T</code>",id:"getcommand-t",level:4},{value:"Contains (Type type) <code>bool</code>",id:"contains-type-type-bool",level:4},{value:"Enqueue (Command command) <code>void</code>",id:"enqueue-command-command-void",level:4}],l={toc:d},m="wrapper";function c(e){let{components:o,...a}=e;return(0,t.kt)(m,(0,n.Z)({},l,a,{components:o,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"commandbuffer"},"CommandBuffer"),(0,t.kt)("p",null,'CommandBuffer es un componente que almacena una serie de comandos en una cola de un tama\xf1o determinado por el usuario (por defecto es 10). La idea de este componente es que sirva de ayuda para tener acciones buffereadas en el juego como por ejemplo al caer de un salto y presionar la tecla de salto nuevamente prevenir que el input de salto sea "comido" por el estado de aire y se pueda agendar para cuando toque el suelo en un tiempo de espera m\xe1ximo de 10 frames.'),(0,t.kt)("h3",{id:"atributos"},"Atributos"),(0,t.kt)("h4",{id:"buffersize"},"BufferSize"),(0,t.kt)("p",null,"Indica el tama\xf1o del buffer de acciones, mientras mayor sea el tama\xf1o m\xe1s ser\xe1 el espacio de acciones a guardar. Por ejemplo si es el tama\xf1o es de 60 acciones realizadas un segundo antes de lo posible se ejecutar\xe1n, lo que puede resultar en un comportamiento involuntario por lo que se recomienda que el tama\xf1o del buffer sea entre 5 a 15 frames."),(0,t.kt)("h3",{id:"m\xe9todos"},"M\xe9todos"),(0,t.kt)("h4",{id:"update"},"Update()"),(0,t.kt)("p",null,"El m\xe9todo update actualiza la cola ingresando continuamente nuevos comandos vac\xedos, en caso de que la cola supere el tama\xf1o m\xe1ximo se quitar\xe1 el elemento m\xe1s antiguo de la cola para que pueda ingresar uno nuevo."),(0,t.kt)("p",null,"Este proceso es importante ya que si no se limpian comandos antiguos con el tiempo se pueden producir acciones involuntarias"),(0,t.kt)("h4",{id:"getcommand-t"},"GetCommand() ",(0,t.kt)("inlineCode",{parentName:"h4"},"T")),(0,t.kt)("p",null,"Retorna un comando del tipo T si es que existe. Esto es \xfatil si se necesita implementar otro tipo de comando por ejemplo PhysicsCommand donde al ejecutar este tipo de comando se pasa por par\xe1metro un objeto de tipo MovePhysics."),(0,t.kt)("p",null,"Este es un m\xe9todo recursivo que retornar\xe1 la acci\xf3n si es que existe pasando eliminando todo lo que este en prioridad a esta acci\xf3n. En caso de que no exista la acci\xf3n retornar\xe1 una nulo."),(0,t.kt)("h4",{id:"contains-type-type-bool"},"Contains (Type type) ",(0,t.kt)("inlineCode",{parentName:"h4"},"bool")),(0,t.kt)("p",null,"Retorna verdadero si el tipo de comando est\xe1 contenido en la cola, es \xfatil para echar un vistazo antes de obtener un comando para asegurar de que exista y no retorne un nulo."),(0,t.kt)("h4",{id:"enqueue-command-command-void"},"Enqueue (Command command) ",(0,t.kt)("inlineCode",{parentName:"h4"},"void")),(0,t.kt)("p",null,"Agrega un valor a la cola, aunque el m\xe9todo update se encarga de agregar valores por si solo este m\xe9todo es \xfatil para agregar nuevos comandos. Idealmente se deber\xe1 usar cuando el usuario presione un bot\xf3n para realizar una acci\xf3n, en luagr de realizar la acci\xf3n directamente se ingresa a esta cola de comandos."))}c.isMDXComponent=!0}}]);